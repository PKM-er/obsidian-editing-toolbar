name: Release Obsidian plugin

on:
    workflow_dispatch:
    push:
        # Sequence of patterns matched against refs/tags
        tags:
            - "*" # Push events to matching any tag format, i.e. 1.0, 20.15.10
env:
    PLUGIN_NAME: editing-toolbar
    OUTPUT_DIR: ./Editing-Toolbar-Test-Vault/.obsidian/plugins/editing-toolbar

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Use Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16
            - name: Get tag version
              id: get_version
              run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            - name: Update version in manifest.json
              run: |
                  # 更新根目录下的manifest.json中的version为标签版本
                  jq '.version = "${{ steps.get_version.outputs.version }}"' manifest.json > manifest.json.tmp
                  mv manifest.json.tmp manifest.json
                  # 确保输出目录存在
                  mkdir -p ${{ env.OUTPUT_DIR }}
                  # 复制更新后的manifest.json到输出目录
                  cp manifest.json ${{ env.OUTPUT_DIR }}/
            - name: Build
              id: build
              run: |
                  # 使用 --legacy-peer-deps 参数解决依赖冲突
                  npm install --legacy-peer-deps
                  npm run build
                  # 为发布准备文件
                  mkdir ${{ env.PLUGIN_NAME }}
                  # 从实际构建输出目录复制文件
                  cp ${{ env.OUTPUT_DIR }}/main.js ${{ env.OUTPUT_DIR }}/styles.css ./manifest.json ${{ env.PLUGIN_NAME }}/
                  zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}
                  ls
                  echo "tag_name=${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
            - name: Create Release
              id: create_release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.get_version.outputs.version }}
                  name: ${{ steps.get_version.outputs.version }}
                  draft: false
                  prerelease: false
                  files: |
                    ${{ env.PLUGIN_NAME }}.zip
                    ${{ env.OUTPUT_DIR }}/main.js
                    ./manifest.json
                    ${{ env.OUTPUT_DIR }}/styles.css
                  token: ${{ secrets.GITHUB_TOKEN }}
